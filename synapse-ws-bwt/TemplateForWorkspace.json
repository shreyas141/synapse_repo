{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-ws-bwt"
		},
		"ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-ws-bwt-ondemand.sql.azuresynapse.net;Initial Catalog=nyc_taxi_ldw"
		},
		"synapse-ws-bwt-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-ws-bwt-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-ws-bwt.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_covidgentwo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://covidgentwo.dfs.core.windows.net/"
		},
		"synapse-ws-bwt-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://covidgentwo.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/create gold trip data green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Year And Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "Query",
									"text": {
										"value": "SELECT DISTINCT year, month FROM bronze.vw_trip_data_green_csv;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach_month_and_year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Year And Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Year And Month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "usp_create_trip_Data_green_gold",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete_gold_files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Delete_gold_files",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_gold_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"year": {
													"value": "@item().year",
													"type": "Expression"
												},
												"month": {
													"value": "@item().month",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "create gold trp data green view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach_month_and_year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "USE nyc_taxi_ldw;",
										"type": "Expression"
									}
								},
								{
									"type": "NonQuery",
									"text": {
										"value": "DROP VIEW IF EXISTS gold.vw_trip_data_green;",
										"type": "Expression"
									}
								},
								{
									"type": "NonQuery",
									"text": {
										"value": "CREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH(\n        borough VARCHAR(15),\n        trip_date DATE,\n        trip_day VARCHAR(10),\n        is_weekend CHAR(1),\n        total_card_payment_count INT,\n        total_cash_payments_count INT,\n        total_street_hail_trip_count INT,\n        total_dispatch_trip_count INT,\n        trip_distance FLOAT,\n        trip_duration VARCHAR(30),\n        fare_amount FLOAT\n    ) AS result;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_gold_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create silver trip data green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Year And Month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "Query",
									"text": {
										"value": "SELECT DISTINCT year, month FROM bronze.vw_trip_data_green_csv;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach_month_and_year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Year And Month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Year And Month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "usp_create_trip_Data_green_silver",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete_silver_files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Delete_silver_files",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_trip_data_green",
											"type": "DatasetReference",
											"parameters": {
												"year": {
													"value": "@item().year",
													"type": "Expression"
												},
												"month": {
													"value": "@item().month",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "create silver trp data green view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach_month_and_year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "USE nyc_taxi_ldw;",
										"type": "Expression"
									}
								},
								{
									"type": "NonQuery",
									"text": {
										"value": "DROP VIEW IF EXISTS silver.vw_trip_data_green;",
										"type": "Expression"
									}
								},
								{
									"type": "NonQuery",
									"text": {
										"value": "CREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result];",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_silver_trip_data_green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_silver_table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEachFilePathAndUsp",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_file_path_and_usp_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "delete_silver_file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_silver_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_file_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "usp_create_silver_table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "delete_silver_file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_file_path_and_usp_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendors",
								"usp_name": "silver.usp_silver_vendors"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_silver_taxi_zone_files",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create_taxi_zones",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "delete_silver_taxi_zone_files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;\n",
										"type": "Expression"
									}
								},
								{
									"type": "NonQuery",
									"text": {
										"value": "CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n        SELECT \n            *\n            FROM bronze.taxi_zone;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete_silver_taxi_zone_files",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "usp_create_taxi_zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "delete_silver_taxi_zone_files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execute_pipelines')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute pl create_silver_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create_silver_table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute pl create silver trip data green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create silver trip data green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute pl create gold trip data green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute pl create_silver_table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute pl create silver trip data green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "create gold trip data green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "execute"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/create_silver_table')]",
				"[concat(variables('workspaceId'), '/pipelines/create silver trip data green')]",
				"[concat(variables('workspaceId'), '/pipelines/create gold trip data green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_gold_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_covidgentwo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "nyc_taxi_data/gold/trip_data_green/year=@{dataset().year}/month=@{dataset().month}",
							"type": "Expression"
						},
						"fileSystem": "synapse-analytics-ws"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_covidgentwo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_covidgentwo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_file_path": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('nyc_taxi_data/', dataset().p_file_path)",
							"type": "Expression"
						},
						"fileSystem": "synapse-analytics-ws"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_covidgentwo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_covidgentwo",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "nyc_taxi_data/silver/taxi_zone",
						"fileSystem": "synapse-analytics-ws"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "location_id",
						"type": "INT_16"
					},
					{
						"name": "borough",
						"type": "UTF8"
					},
					{
						"name": "zone",
						"type": "UTF8"
					},
					{
						"name": "service_zone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_covidgentwo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_covidgentwo",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "String"
					},
					"month": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "nyc_taxi_data/silver/trip_data_green/year=@{dataset().year}/month=@{dataset().month}",
							"type": "Expression"
						},
						"fileSystem": "synapse-analytics-ws"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_covidgentwo')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_covidgentwo')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_covidgentwo_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_synapse_serverless_sql_pool_db_nyc_taxi_ldw_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-ws-bwt-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-ws-bwt-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-ws-bwt-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-ws-bwt-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1 explore_txi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "-- HEADER_ROW set to TRUE, Row and Field terminators set\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n-- Examine the data types for the columns\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) AS [result]'\n\nSELECT\n    MAX(LEN(LocationId)) AS len_LocationId,\n    MAX(LEN(Borough)) AS len_Borough,\n    MAX(LEN(Zone)) AS len_Zone,\n    MAX(LEN(service_zone)) AS len_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) AS [result]\n\n-- Use WITH clause to provide explicit data types\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]\n\nEXEC sp_describe_first_result_set N'SELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ''abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n''\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]'\n\nSELECT name, collation_name FROM sys.databases;\n\n-- Specify UTF-8 Collation for VARCHAR columns\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    )AS [result]\n\nCREATE DATABASE nyc_taxi_discovery;\n\nUSE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]\n\n\n-- Select only subset of columns \nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        Borough VARCHAR(15),\n        Zone VARCHAR(50)\n    )AS [result]         \n\n-- Read data from a file without header\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        Zone VARCHAR(50) 3,\n        Borough VARCHAR(15) 2\n    )\nAS [result]     \n\n\n-- Fix Column Names\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )AS [result]\n\n-- Create External Data Source\nCREATE EXTERNAL DATA SOURCE nyc_taxi_data_raw\nWITH(\n    LOCATION = 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.windows.net/nyc_taxi_data/raw'\n)\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )AS [result]\n\n\nDROP EXTERNAL DATA SOURCE nyc_taxi_data;\n\nSELECT name, location FROM sys.external_data_sources;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10 check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT\n    result.location_id,\n    COUNT(1) as number_of_records\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIRSTROW = 2,\n        FIELDTERMINATOR = ',',\n        ROWTERMINATOR = '\\n'\n    ) \n    WITH (\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )AS [result]\n    GROUP BY result.location_id\n    HAVING COUNT(1) > 1;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.rate_code.json') IS NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code;\n    \nCREATE EXTERNAL TABLE SILVER.rate_code\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/rate_code',\n    FILE_FORMAT = parquet_file_format\n)\nAS SELECT \n        rate_code_id,\n        rate_code\n        FROM \n            OPENROWSET(\n                BULK 'raw/rate_code.json',\n                DATA_SOURCE = 'nyc_taxi_src',\n                FORMAT = 'CSV',\n                FIELDTERMINATOR = '0x0b',\n                ROWTERMINATOR = '0x0b',\n                FIELDQUOTE = '0x0b',\n                PARSER_VERSION = '1.0'\n            )\n            WITH(\n                jsonDoc NVARCHAR(MAX)\n            ) AS re1\n            CROSS APPLY OPENJSON(jsonDoc)\n            WITH(\n                rate_code_id TINYINT,\n                rate_code VARCHAR(20)\n            ) AS re2;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11 data_quality_check')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n-- Identify any data quality issues in trip total amount\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]    \n  \nSELECT\n    MIN(total_amount) AS min_total_amount,\n    MAX(total_amount) AS max_total_amount,\n    AVG (total_amount) AS avg_total_amount,\n    COUNT(1) AS total_number_of_records,\n    COUNT(total_amount) AS not_null_total_number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result]  \n\nSELECT\n    payment_type, COUNT(1) AS number_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        FORMAT = 'PARQUET',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS [result] \n-- WHERE total_amount < 0 \nGROUP BY payment_type\nORDER BY payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.payment_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type;\n    \nCREATE EXTERNAL TABLE silver.payment_type\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/payment_type',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT \n    payment_type,\n    value AS payment_type_desc\n    FROM\n        OPENROWSET(\n            BULK 'raw/payment_type_array.json',\n            DATA_SOURCE = 'nyc_taxi_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            ROWTERMINATOR = '0x0a',\n            FIELDQUOTE = '0x0b',\n            PARSER_VERSION = '1.0'\n        )\n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS re\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            payment_type INT,\n            payment_type_desc NVARCHAR(MAX) AS JSON\n        ) AS re1\n        CROSS APPLY OPENJSON(payment_type_desc)\n        WITH(\n            value VARCHAR(20)\n        ) AS re2;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12 join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT \n    *\n    FROM \n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'PARQUET'\n        ) AS trip_data\n        JOIN\n        OPENROWSET(\n            BULK 'taxi_zone.csv',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'CSV',\n            fieldterminator = ',',\n            ROWTERMINATOR = '\\n',\n            PARSER_VERSION = '2.0',\n            FIRSTROW = 2\n        ) \n        WITH(\n            location_id SMALLINT 1,\n            borough VARCHAR(15) 2,\n            zone VARCHAR(50) 3,\n            service_zone VARCHAR(15) 4\n        ) AS taxi_zone\n        ON taxi_zone.location_id = trip_data.PULocationID;\n\n\nSELECT \n    taxi_zone.borough, COUNT(1) AS total_trips\n    FROM \n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'PARQUET'\n        ) AS trip_data\n        JOIN\n        OPENROWSET(\n            BULK 'taxi_zone.csv',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'CSV',\n            fieldterminator = ',',\n            ROWTERMINATOR = '\\n',\n            PARSER_VERSION = '2.0',\n            FIRSTROW = 2\n        ) \n        WITH(\n            location_id SMALLINT 1,\n            borough VARCHAR(15) 2,\n            zone VARCHAR(50) 3,\n            service_zone VARCHAR(15) 4\n        ) AS taxi_zone\n        ON taxi_zone.location_id = trip_data.PULocationID\n        GROUP BY taxi_zone.borough\n        ORDER BY 1 DESC;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nEXEC silver.usp_silver_trip_data_green '2020', '01'\nEXEC silver.usp_silver_trip_data_green '2020', '02'\nEXEC silver.usp_silver_trip_data_green '2020', '03'\nEXEC silver.usp_silver_trip_data_green '2020', '04'\nEXEC silver.usp_silver_trip_data_green '2020', '05'\nEXEC silver.usp_silver_trip_data_green '2020', '06'\nEXEC silver.usp_silver_trip_data_green '2020', '07'\nEXEC silver.usp_silver_trip_data_green '2020', '08'\nEXEC silver.usp_silver_trip_data_green '2020', '09'\nEXEC silver.usp_silver_trip_data_green '2020', '10'\nEXEC silver.usp_silver_trip_data_green '2020', '11'\nEXEC silver.usp_silver_trip_data_green '2020', '12'\nEXEC silver.usp_silver_trip_data_green '2021', '01'\nEXEC silver.usp_silver_trip_data_green '2021', '02'\nEXEC silver.usp_silver_trip_data_green '2021', '03'\nEXEC silver.usp_silver_trip_data_green '2021', '04'\nEXEC silver.usp_silver_trip_data_green '2021', '05'\nEXEC silver.usp_silver_trip_data_green '2021', '06'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13 simple_transformations')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT \n    lpep_pickup_datetime,\n    lpep_dropoff_datetime,\n    CONCAT(CAST(\n        DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) AS VARCHAR(10)), ' ', 'min') AS Duration\n    FROM \n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=2020/month=01/',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'PARQUET'\n        ) AS result;\n\nSELECT \n        lpep_pickup_datetime,\n        lpep_dropoff_datetime,\n        DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) /60 AS from_hour,\n        DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) /60 + 1 AS to_hour\n    FROM \n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=2020/month=01/',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'PARQUET'\n        ) AS result;\n\nSELECT \n        DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) /60 AS from_hour,\n        DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) /60 + 1 AS to_hour,\n        COUNT(1) AS num_of_trips\n    FROM \n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=2020/month=01/',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'PARQUET'\n        ) AS result\n        GROUP BY DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) /60,\n        DATEDIFF(MINUTE, result.lpep_pickup_datetime, result.lpep_dropoff_datetime) /60 + 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH (\n        vendor_id INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n  ) AS [result]\nGO\n\nSELECT TOP(100) *\n  FROM silver.vw_trip_data_green\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n/*\nSELECT \n    td.year,\n    td.month,\n    tz.borough,\n    CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n    CONVERT(DATE, td.lpep_dropoff_datetime) AS trip_date_dropoff,\n    cal.day_name AS trip_day,\n    td.trip_type,\n    tt.trip_type_desc,\n    CASE WHEN cal.day_name IN ('Sunday', 'Saturday') THEN 'Y' ELSE 'N' END AS is_weekend,\n    SUM(CASE WHEN pt.payment_type_desc = 'Credit card' THEN 1 ELSE 0 END) AS total_card_payment_count,\n    SUM(CASE WHEN pt.payment_type_desc = 'Cash' THEN 1 ELSE 0 END) AS total_cash_payments_count,\n    SUM(CASE WHEN tt.trip_type_desc = 'Street-hail' THEN 1 ELSE 0 END) AS total_street_hail_trip_count,\n    SUM(CASE WHEN tt.trip_type_desc = 'Dispatch' THEN 1 ELSE 0 END) AS total_dispatch_trip_count,\n    SUM(td.trip_distance) AS trip_distance,\n    CONCAT(CONCAT(CONVERT(VARCHAR(10), DATEDIFF(MINUTE, CONVERT(DATE, td.lpep_pickup_datetime), CONVERT(DATE, td.lpep_dropoff_datetime))/60), ' ', 'hrs') ,\n    ' to ',\n    CONCAT(CONVERT(VARCHAR(10), DATEDIFF(MINUTE, CONVERT(DATE, td.lpep_pickup_datetime), CONVERT(DATE, td.lpep_dropoff_datetime))/60+1), ' ', 'hrs') )AS trip_duration,\n    SUM(td.fare_amount) AS fare_amount\nFROM\n    silver.vw_trip_data_green td\nJOIN\n    silver.taxi_zone tz\nON  td.pu_location_id = tz.location_id\nJOIN\n    silver.calender cal \nON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\nJOIN \n    silver.payment_type pt\nON td.payment_type = pt.payment_type\nJOIN\n    silver.trip_type tt\nON td.trip_type = tt.trip_type\nWHERE\n    CONVERT(INT, td.year) = 2020\n    AND\n    CONVERT(INT, td.month) = 01\nGROUP BY\n    td.year,\n    td.month,\n    tz.borough,\n    td.trip_type,\n    tt.trip_type_desc,\n    CONVERT(DATE, td.lpep_pickup_datetime),\n    CONVERT(DATE, td.lpep_dropoff_datetime),\n    cal.day_name;\n*/\n\nEXEC gold.usp_gold_trip_data_green '2020', '01'\nEXEC gold.usp_gold_trip_data_green '2020', '02'\nEXEC gold.usp_gold_trip_data_green '2020', '03'\nEXEC gold.usp_gold_trip_data_green '2020', '04'\nEXEC gold.usp_gold_trip_data_green '2020', '05'\nEXEC gold.usp_gold_trip_data_green '2020', '06'\nEXEC gold.usp_gold_trip_data_green '2020', '07'\nEXEC gold.usp_gold_trip_data_green '2020', '08'\nEXEC gold.usp_gold_trip_data_green '2020', '09'\nEXEC gold.usp_gold_trip_data_green '2020', '10'\nEXEC gold.usp_gold_trip_data_green '2020', '11'\nEXEC gold.usp_gold_trip_data_green '2020', '12'\nEXEC gold.usp_gold_trip_data_green '2021', '01'\nEXEC gold.usp_gold_trip_data_green '2021', '02'\nEXEC gold.usp_gold_trip_data_green '2021', '03'\nEXEC gold.usp_gold_trip_data_green '2021', '04'\nEXEC gold.usp_gold_trip_data_green '2021', '05'\nEXEC gold.usp_gold_trip_data_green '2021', '06'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/15_create_gold_taxi_data_green_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO \n\n-- Create view for trip_data_green\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET'\n    )\n    WITH(\n        borough VARCHAR(15),\n        trip_date DATE,\n        trip_day VARCHAR(10),\n        is_weekend CHAR(1),\n        total_card_payment_count INT,\n        total_cash_payments_count INT,\n        total_street_hail_trip_count INT,\n        total_dispatch_trip_count INT,\n        trip_distance FLOAT,\n        trip_duration VARCHAR(30),\n        fare_amount FLOAT\n    ) AS result\nGO\n\nSELECT * FROM gold.vw_trip_data_green;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_How_to_create_database')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "How to create Extrenal Table"
				},
				"content": {
					"query": "CREATE DATABASE sample_db\nCOLLATE Latin1_General_100_BIN2_UTF8;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE MASTER\nGO\n\nCREATE DATABASE nyc_taxi_ldw\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze\nGO\n\nCREATE SCHEMA silver\nGO\n\nCREATE SCHEMA gold\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_'+ @year + '_' + @month +\n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''silver/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n            SELECT [VendorID] AS vendor_id\n                ,[lpep_pickup_datetime]\n                ,[lpep_dropoff_datetime]\n                ,[store_and_fwd_flag]\n                ,[total_amount]\n                ,[payment_type]\n                ,[trip_type]\n                ,[congestion_surcharge]\n                ,[extra]\n                ,[mta_tax]\n                ,[tip_amount]\n                ,[tolls_amount]\n                ,[ehail_fee]\n                ,[improvement_surcharge]\n                ,[RatecodeID] AS rate_code_id\n                ,[PULocationID] AS pu_location_id\n                ,[DOLocationID] AS do_location_id\n                ,[passenger_count]\n                ,[trip_distance]\n                ,[fare_amount]\n            FROM bronze.vw_trip_data_green_csv\n            WHERE year = ''' + @year + '''\n            AND month = ''' + @month + '''';\n    print(@create_sql_stmt)\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.trip_data_green_'+ @year + '_' + @month ;\n    \n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2 explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "EXEC sp_describe_first_result_set N'SELECT \n    *\nFROM \n    OPENROWSET (\n        BULK ''calendar.csv'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        FIELDTERMINATOR = '','',\n        HEADER_ROW = TRUE\n    ) AS [result] '\n\nSELECT \n    MAX(LEN(date_key)) AS date_key_len,\n    MAX(LEN(year)) AS year_len,\n    MAX(LEN(month)) AS month_len,\n    MAX(LEN(day)) AS day_len,\n    MAX(LEN(day_name)) AS day_name_len,\n    MAX(LEN(day_of_year)) AS day_of_year_len,\n    MAX(LEN(week_of_year)) AS week_of_year_len,\n    MAX(LEN(month_name)) AS month_name_len,\n    MAX(LEN(year_month)) AS year_month_len,\n    MAX(LEN(year_week)) AS year_week_len\nFROM \n    OPENROWSET (\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\nSELECT \n    *\nFROM \n    OPENROWSET (\n        BULK 'calendar.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        FIELDTERMINATOR = ',',\n        FIRST_ROW = 2\n    ) \n    WITH(\n        date_key INT,\n        date DATE,\n        year INT,\n        month INT,\n        day INT,\n        day_name VARCHAR(15),\n        day_of_year INT,\n        week_of_month TINYINT,\n        week_of_year INT,\n        month_name VARCHAR(15),\n        year_month INT,\n        year_week INT\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_How_to_create_master key')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "How to create Extrenal Table"
				},
				"content": {
					"query": "CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Shreyas@141';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sample_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_external_data_sourxe')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS(SELECT * FROM sys.external_data_sources WHERE name = 'nyc_taxi_src')\n    CREATE EXTERNAL DATA SOURCE nyc_taxi_src\n    WITH\n    (\n        LOCATION = 'https://covidgentwo.dfs.core.windows.net/synapse-analytics-ws/nyc_taxi_data/'\n    );\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE gold.usp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_'+ @year + '_' + @month +\n        ' WITH\n            (\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year=' + @year + '/month=' + @month + ''',\n                FILE_FORMAT = parquet_file_format\n            )\n        AS\n        SELECT \n            td.year,\n            td.month,\n            tz.borough,\n            CONVERT(DATE, td.lpep_dropoff_datetime) AS trip_date_dropoff,\n            CONVERT(DATE, td.lpep_pickup_datetime) AS trip_date,\n            cal.day_name AS trip_day,\n            td.trip_type,\n            tt.trip_type_desc,\n            CASE WHEN cal.day_name IN (''Sunday'', ''Saturday'') THEN ''Y'' ELSE ''N'' END AS is_weekend,\n            SUM(CASE WHEN pt.payment_type_desc = ''Credit card'' THEN 1 ELSE 0 END) AS total_card_payment_count,\n            SUM(CASE WHEN pt.payment_type_desc = ''Cash'' THEN 1 ELSE 0 END) AS total_cash_payments_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Street-hail'' THEN 1 ELSE 0 END) AS total_street_hail_trip_count,\n            SUM(CASE WHEN tt.trip_type_desc = ''Dispatch'' THEN 1 ELSE 0 END) AS total_dispatch_trip_count,\n            SUM(td.trip_distance) AS trip_distance,\n            CONCAT(CONCAT(CONVERT(VARCHAR(10), DATEDIFF(MINUTE, CONVERT(DATE, td.lpep_pickup_datetime), CONVERT(DATE, td.lpep_dropoff_datetime))/60), '' '', ''hrs'') ,\n            '' to '',\n            CONCAT(CONVERT(VARCHAR(10), DATEDIFF(MINUTE, CONVERT(DATE, td.lpep_pickup_datetime), CONVERT(DATE, td.lpep_dropoff_datetime))/60+1), '' '', ''hrs'') )AS trip_duration,\n            SUM(td.fare_amount) AS fare_amount\n        FROM\n            silver.vw_trip_data_green td\n        JOIN\n            silver.taxi_zone tz\n        ON  td.pu_location_id = tz.location_id\n        JOIN\n            silver.calendar cal \n        ON cal.date = CONVERT(DATE, td.lpep_pickup_datetime)\n        JOIN \n            silver.payment_type pt\n        ON td.payment_type = pt.payment_type\n        JOIN\n            silver.trip_type tt\n        ON td.trip_type = tt.trip_type\n        WHERE td.year = ''' + @year + '''\n          AND td.month = ''' + @month + '''\n        GROUP BY\n            td.year,\n            td.month,\n            tz.borough,\n            td.trip_type,\n            tt.trip_type_desc,\n            CONVERT(DATE, td.lpep_dropoff_datetime),\n            CONVERT(DATE, td.lpep_pickup_datetime),\n            cal.day_name'\n    print(@create_sql_stmt)\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE gold.trip_data_green_'+ @year + '_' + @month ;\n    \n    print(@drop_sql_stmt)\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3 explore_vendors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT \n    *\nFROM \n    OPENROWSET(\n        BULK 'vendor_unquoted.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS vend;\n\nSELECT \n    *\nFROM \n    OPENROWSET(\n        BULK 'vendor_escaped.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        ESCAPECHAR = '\\\\'\n    ) AS vend;\n\nSELECT \n    *\nFROM \n    OPENROWSET(\n        BULK 'vendor.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDQUOTE = '\"'\n    ) AS vend;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_How_to_create_scoped_credential')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "How to create Extrenal Table"
				},
				"content": {
					"query": "CREATE DATABASE SCOPED CREDENTIAL Mycredentials\nWITH \nIDENTITY = 'SHARED ACCESS SIGNATURE',\nSECRET = 'sp=racwdlme&st=2024-05-05T06:52:03Z&se=2024-05-05T14:52:03Z&spr=https&sv=2022-11-02&sr=c&sig=%2F3%2BLs32tDhLAoyDfGxCa5iH3zx8cVum32PCt8zu%2BnXs%3D'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sample_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_external_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Creat external file format as csv_file_format with parsor_version 2.0\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name='csv_file_format')\n    CREATE EXTERNAL FILE FORMAT csv_file_format\n    WITH\n    (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '2.0'\n        )\n    );\n\n-- Creat external file format as csv_file_format with parsor_version 1.0\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name='csv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH\n    (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = ',',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '1.0'\n        )\n    );\n\n-- Creat external file format as tsv_file_format with parsor_version 2.0\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name='tsv_file_format')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format\n    WITH\n    (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = '\\t',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '2.0'\n        )\n    );\n\n-- Creat external file format as tsv_file_format with parsor_version 1.0\nIF NOT EXISTS(SELECT * FROM sys.external_file_formats WHERE name='tsv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH\n    (\n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS (\n            FIELD_TERMINATOR = '\\t',\n            STRING_DELIMITER = '\"',\n            FIRST_ROW = 2,\n            USE_TYPE_DEFAULT = FALSE,\n            ENCODING = 'UTF8',\n            PARSER_VERSION = '1.0'\n        )\n    );\n\n-- Creat external file format as parquet_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'parquet_file_format')\n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH(\n        FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );\n\n-- Creat external file format as delta_file_format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'delta_file_format')\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH(\n        FORMAT_TYPE = delta,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\n    BEGIN\n        IF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n            DROP EXTERNAL TABLE silver.taxi_zone;\n\n        CREATE EXTERNAL TABLE silver.taxi_zone\n            WITH(\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = 'silver/taxi_zone',\n                FILE_FORMAT = parquet_file_format\n            )\n            AS\n                SELECT \n                    *\n                    FROM bronze.taxi_zone;\n    END;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4 explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT \n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_type.tsv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '\\t',\n        HEADER_ROW = TRUE,\n        PARSER_VERSION = '2.0'\n    ) AS [trip_type]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_How_to_CREATE_EXTERNAL_DATA_SOURCE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "How to create Extrenal Table"
				},
				"content": {
					"query": "CREATE EXTERNAL DATA SOURCE sample_source\nWITH(\n    LOCATION = 'abfss://synapse-analytics-ws@covidgentwo.dfs.core.net',\n    CREDENTIAL = Mycredentials\n)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sample_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_external_tables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Querying taxi_zone File\nIF OBJECT_ID('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\n\nCREATE EXTERNAL TABLE bronze.taxi_zone(\n    location_id SMALLINT,\n    borough VARCHAR(15),\n    zone VARCHAR(50),\n    service_zone VARCHAR(15)\n)\nWITH(\n    LOCATION = 'raw/taxi_zone.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejected_rows_location/taxi_zone'\n);\n\nSELECT * FROM bronze.taxi_zone;\n\n--Querying Calendar File\nIF OBJECT_ID('bronze.calender_table') IS NOT NULL\n    DROP EXTERNAL TABLE nyc_taxi_ldw.bronze.calender_table;\n\nCREATE EXTERNAL TABLE bronze.calender_table(\n    date_key INT,\n    date DATE,\n    year INT,\n    month INT,\n    day INT,\n    day_name VARCHAR(15),\n    day_of_year INT,\n    week_of_month TINYINT,\n    week_of_year INT,\n    month_name VARCHAR(15),\n    year_month INT,\n    year_week INT\n)\nWITH(\n    LOCATION = 'raw/calendar.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format_pv1,\n    REJECT_VALUE = 10,\n    REJECTED_ROW_LOCATION = 'rejected_rows_location/calender'\n);\n\nSELECT * FROM bronze.calender_table;\n\n-- Querrying trip_data_green_csv Data\n\nIF OBJECT_ID('bronze.trip_data_green_csv') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_csv;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_csv/**',\n        DATA_SOURCE = nyc_taxi_src,   \n        FILE_FORMAT = csv_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_csv;\n\n-- Querrying vendors Data\nIF OBJECT_ID('bronze.vendors') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendors;\n\nCREATE EXTERNAL TABLE bronze.vendors\n(\n    vendor_id       TINYINT,\n    vendor_name     VARCHAR(50)\n)\nWITH(\n    LOCATION = 'raw/vendor.csv',\n    DATA_SOURCE = nyc_taxi_src,\n    FILE_FORMAT = csv_file_format\n);\n\nSELECT * FROM bronze.vendors;\n\n-- Create trip_type table\nIF OBJECT_ID('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\n\nCREATE EXTERNAL TABLE bronze.trip_type\n    (\n        trip_type       TINYINT,\n        trip_type_desc  VARCHAR(50)\n    )  \n    WITH (\n        LOCATION = 'raw/trip_type.tsv',  \n        DATA_SOURCE = nyc_taxi_src,  \n        FILE_FORMAT = tsv_file_format_pv1,\n        REJECT_VALUE = 10,\n        REJECTED_ROW_LOCATION = 'rejections/trip_type'\n    );\n\nSELECT * FROM bronze.trip_type;\n\n-- create trip data external table parquet\nIF OBJECT_ID('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_parquet/**',\n        DATA_SOURCE = nyc_taxi_src,   \n        FILE_FORMAT = parquet_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_parquet;\n\n-- create trip data external table delta\nIF OBJECT_ID('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta;\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta\n    (\n        VendorID INT,\n        lpep_pickup_datetime datetime2(7),\n        lpep_dropoff_datetime datetime2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )  \n    WITH (\n        LOCATION = 'raw/trip_data_green_delta',\n        DATA_SOURCE = nyc_taxi_src,   \n        FILE_FORMAT = delta_file_format\n    );\n\nSELECT TOP(100) * FROM bronze.trip_data_green_delta;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_calendar\nAS\n    BEGIN\n        IF OBJECT_ID('silver.calendar') IS NOT NULL\n            DROP EXTERNAL TABLE silver.calendar;\n\n        CREATE EXTERNAL TABLE silver.calendar\n        WITH(\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/calendar',\n            FILE_FORMAT = parquet_file_format\n        )\n        AS SELECT\n                *\n                FROM bronze.calender_table;\n    END;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5 payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "-- How to read json \nSELECT \n    *\nFROM \n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonObject NVARCHAR(MAX)\n    )AS [result]\n\n-- How to extract column_name and values using JSON_VALUE function\n    SELECT \n    CAST(JSON_VALUE(jsonObject, '$.payment_type') AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonObject, '$.payment_type_desc') AS VARCHAR(20)) payment_type_desc\nFROM \n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonObject NVARCHAR(MAX)\n    )AS [result]\n\n-- How to fetch dataset in tabulor format using OPEN_JSON function with single line json\nSELECT *\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0a',\n        FIELDQUOTE = '0x0b'\n    )\n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n    CROSS APPLY OPENJSON(jsonDoc)\n\nSELECT payment_type,\n       payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0a',\n        FIELDQUOTE = '0x0b'\n    )\n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        payment_type SMALLINT,\n        payment_type_desc VARCHAR(20)\n    )\n    AS [result]\n\n-- How to Rename the column name\nSELECT payment_type,\n       information\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0a',\n        FIELDQUOTE = '0x0b'\n    )\n    WITH (\n        jsonDoc NVARCHAR(MAX)\n    ) AS payment_type\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH(\n        payment_type SMALLINT,\n        information VARCHAR(20) '$.payment_type_desc'\n    )\n    AS [result]\n\n--How to deal with array type value in JSON\nSELECT \n    CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc[0].value') AS VARCHAR(20)) payment_type_desc\nFROM \n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR = '0x0b'\n    )\n    WITH(\n        jsonDoc NVARCHAR(MAX)\n    ) AS pyment_type_arr;\n\nSELECT \n    payment_type,\n    payment_type_info\n    FROM \n        OPENROWSET(\n            BULK 'payment_type_array.json',\n            FORMAT = 'CSV',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b'\n        )\n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS pymnt_arr\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            payment_type SMALLINT,\n            payment_type_desc NVARCHAR(MAX) AS JSON\n        ) AS pymnt_list\n        CROSS APPLY OPENJSON(payment_type_desc)\n        WITH(\n            payment_type_info VARCHAR(20) '$.value'\n        ) AS [result]\n\n\n        ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nDROP VIEW IF EXISTS bronze.vw_rate_code\nGO\n\n-- CREATE VIEW FOR rate_code\nCREATE VIEW bronze.vw_rate_code\nAS\n    SELECT \n        rate_code_id,\n        rate_code\n        FROM\n            OPENROWSET(\n                BULK 'raw/rate_code.json',\n                DATA_SOURCE = 'nyc_taxi_src',\n                FORMAT = 'CSV',\n                FIELDTERMINATOR = '0x0b',\n                ROWTERMINATOR = '0x0b',\n                FIELDQUOTE = '0x0b',\n                PARSER_VERSION = '1.0'\n            )\n            WITH(\n                jsonDoc NVARCHAR(MAX)\n            ) AS result\n            CROSS APPLY OPENJSON(jsonDoc)\n            WITH(\n                rate_code_id INT,\n                rate_code VARCHAR(20)\n            ) AS re\nGO\n\nDROP VIEW IF EXISTS bronze.vw_payment_type\nGO\n\n-- CREATE VIEW FOR payment_type\nCREATE VIEW bronze.vw_payment_type\nAS\n SELECT \n    CAST(JSON_VALUE(jsonObject, '$.payment_type') AS SMALLINT) payment_type,\n    CAST(JSON_VALUE(jsonObject, '$.payment_type_desc') AS VARCHAR(20)) payment_type_desc\nFROM \n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_ldw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',\n        FIELDQUOTE = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    ) \n    WITH(\n        jsonObject NVARCHAR(MAX)\n    )AS [result]\nGO\n\n-- CREATE VIEW FOR trip_data_green\nDROP VIEW IF EXISTS vw_bronze.trip_data_green_csv\nGO\n\nCREATE VIEW bronze.vw_trip_data_green_csv\nAS\nSELECT \n    result.*,\n    result.filepath(1) AS year,\n    result.filepath(2) as month\n    FROM\n        OPENROWSET(\n            BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n            DATA_SOURCE = 'nyc_taxi_src',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = ',',\n            ROWTERMINATOR = '\\n',\n            PARSER_VERSION = '2.0',\n            HEADER_ROW = TRUE\n        ) \n        WITH(\n            VendorID INT,\n            lpep_pickup_datetime datetime2(7),\n            lpep_dropoff_datetime datetime2(7),\n            store_and_fwd_flag CHAR(1),\n            RatecodeID INT,\n            PULocationID INT,\n            DOLocationID INT,\n            passenger_count INT,\n            trip_distance FLOAT,\n            fare_amount FLOAT,\n            extra FLOAT,\n            mta_tax FLOAT,\n            tip_amount FLOAT,\n            tolls_amount FLOAT,\n            ehail_fee INT,\n            improvement_surcharge FLOAT,\n            total_amount FLOAT,\n            payment_type INT,\n            trip_type INT,\n            congestion_surcharge FLOAT              \n        )AS result;\n         ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_how_to_create_extrenal_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "How to create Extrenal Table"
				},
				"content": {
					"query": "CREATE EXTERNAL FILE FORMAT MyParquetFormat\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sample_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_vendors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_vendors\nAS\n    BEGIN\n        IF OBJECT_ID('silver.vendors') IS NOT NULL\n            DROP EXTERNAL TABLE silver.vendors;\n\n        CREATE EXTERNAL TABLE silver.vendors\n        WITH(\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/vendors',\n            FILE_FORMAT = parquet_file_format\n        )\n        AS SELECT * FROM bronze.vendors;\n    END;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6 explore_race_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "-- How to deal with standrad JSON Files\nSELECT \n    *\n    FROM\n        OPENROWSET(\n            BULK 'rate_code.json',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'CSV',\n            FIELDTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b',\n            ROWTERMINATOR = '0x0b'\n        )\n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS [result1]\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            rate_code_id TINYINT,\n            rate_code VARCHAR(20)\n        ) AS re2;\n\n-- How to deal with the Multiline Json\nSELECT *\n    FROM\n        OPENROWSET(\n            BULK 'rate_code_multi_line.json',\n            FORMAT = 'CSV',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FIELDTERMINATOR = '0x0b',\n            ROWTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b'\n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS re1\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            rate_code_id TINYINT,\n            rate_code VARCHAR(20)\n        );\n        \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_taxi_zones')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;\n\nCREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS\n        SELECT \n            *\n            FROM bronze.taxi_zone;\n\nSELECT * FROM silver.taxi_zone;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_how_to_create_external_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "How to create Extrenal Table"
				},
				"content": {
					"query": "CREATE EXTERNAL TABLE  sample_schema.sample_table\n(\nVendorID INT,\nIpep_pickup_datetime VARCHAR(100),\nIpep_dropoff_datetime VARCHAR(100),\nstore_and_fwd_flag VARCHAR(100),\nRatecodeID INT,\nPULocationID INT,\nDOLocationID INT,\npassenger_count INT,\ntrip_distance VARCHAR(100),\nfare_amount VARCHAR(100),\nextra VARCHAR(100),\nmta_tax VARCHAR(100),\ntip_amount VARCHAR(100),\ntolls_amount VARCHAR(100),\nehail_fee VARCHAR(100),\nimprovement_surcharge VARCHAR(100),\ntotal_amount VARCHAR(100),\npayment_type VARCHAR(100),\ntrip_type VARCHAR(100),\ncongestion_surcharge VARCHAR(100)\n)\nWITH(\n    LOCATION = 'https://covidgentwo.dfs.core.windows.net/synapse-analytics-ws/NYCTripSmall.parquet',\n    DATA_SOURCE = sample_source,\n    FILE_FORMAT = MyParquetFormat\n)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "sample_db",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\n    BEGIN\n        IF OBJECT_ID('silver.trip_type') IS NOT NULL\n            DROP EXTERNAL TABLE silver.trip_type;\n            \n        CREATE EXTERNAL TABLE silver.trip_type\n            WITH(\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = 'silver/trip_type',\n                FILE_FORMAT = parquet_file_format\n            )\n            AS \n            SELECT *\n                FROM \n                    bronze.trip_type;\n    END;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7 explore_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "-- How to read Multiple files from a one folder\nSELECT \n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\n-- How to Fetch multiple specific files\nSELECT \n    *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        'trip_data_green_csv/year=2021/month=01/green_tripdata_2021-01.csv'),\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\nSELECT \n    lpep_pickup_datetime, COUNT(*)\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        'trip_data_green_csv/year=2021/month=01/green_tripdata_2021-01.csv'),\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result\n    GROUP BY lpep_pickup_datetime\n    ORDER BY lpep_pickup_datetime DESC;\n\n-- How to featch recursive location files\nSELECT \n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\n--How To Fetch All Year, Month Files from location\nSELECT \n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\n-- How to get Metadata of file\nSELECT \n    result.filename() AS file_name,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\nSELECT \n    result.filename() AS file_name,\n    result.filepath() AS file_path,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\n--How to get specific information from path\nSELECT \n    result.filename() AS file_name,\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result;\n\nSELECT \n    result.filename() AS file_name,\n    result.filepath(1) AS year,\n    result.filepath(2) AS month,\n    count(1) AS total_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*',\n        FORMAT = 'CSV',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS result\n    GROUP BY result.filename(), result.filepath(1), result.filepath(2);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_calender')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE silver.calendar;\n\nCREATE EXTERNAL TABLE silver.calendar\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/calendar',\n    FILE_FORMAT = parquet_file_format\n)\nAS SELECT\n        *\n        FROM bronze.calendar_table;\n\nSELECT * FROM silver.calendar;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_rate_code\nAS\n    BEGIN\n        IF OBJECT_ID('silver.rate_code') IS NOT NULL\n            DROP EXTERNAL TABLE silver.rate_code;\n            \n        CREATE EXTERNAL TABLE silver.rate_code\n        WITH(\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/rate_code',\n            FILE_FORMAT = parquet_file_format\n        )\n        AS SELECT \n                rate_code_id,\n                rate_code\n                FROM \n                    OPENROWSET(\n                        BULK 'raw/rate_code.json',\n                        DATA_SOURCE = 'nyc_taxi_src',\n                        FORMAT = 'CSV',\n                        FIELDTERMINATOR = '0x0b',\n                        ROWTERMINATOR = '0x0b',\n                        FIELDQUOTE = '0x0b',\n                        PARSER_VERSION = '1.0'\n                    )\n                    WITH(\n                        jsonDoc NVARCHAR(MAX)\n                    ) AS re1\n                    CROSS APPLY OPENJSON(jsonDoc)\n                    WITH(\n                        rate_code_id TINYINT,\n                        rate_code VARCHAR(20)\n                    ) AS re2;\n    END;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8 explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT  \n    *\n    FROM \n        OPENROWSET(\n            BULK 'trip_data_green_parquet/year=*/month=*/',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FORMAT = 'PARQUET'\n        ) AS [result];\n    \nEXEC sp_describe_first_result_set N'SELECT  \n    *\n    FROM \n        OPENROWSET(\n            BULK ''trip_data_green_parquet/year=*/month=*/'',\n            DATA_SOURCE = ''nyc_taxi_data_raw'',\n            FORMAT = ''PARQUET''\n        ) AS [result];'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_vendors')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nIF OBJECT_ID('silver.vendors') IS NOT NULL\n    DROP EXTERNAL TABLE silver.vendors;\n\nCREATE EXTERNAL TABLE silver.vendors\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/vendors',\n    FILE_FORMAT = parquet_file_format\n)\nAS SELECT * FROM bronze.vendors;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw/usp"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_payment_type\nAS\n    BEGIN\n        IF OBJECT_ID('silver.payment_type') IS NOT NULL\n            DROP EXTERNAL TABLE silver.payment_type;\n            \n        CREATE EXTERNAL TABLE silver.payment_type\n        WITH(\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/payment_type',\n            FILE_FORMAT = parquet_file_format\n        )\n        AS\n        SELECT \n            payment_type,\n            value AS payment_type_desc\n            FROM\n                OPENROWSET(\n                    BULK 'raw/payment_type_array.json',\n                    DATA_SOURCE = 'nyc_taxi_src',\n                    FORMAT = 'CSV',\n                    FIELDTERMINATOR = '0x0b',\n                    ROWTERMINATOR = '0x0a',\n                    FIELDQUOTE = '0x0b',\n                    PARSER_VERSION = '1.0'\n                )\n                WITH(\n                    jsonDoc NVARCHAR(MAX)\n                ) AS re\n                CROSS APPLY OPENJSON(jsonDoc)\n                WITH(\n                    payment_type INT,\n                    payment_type_desc NVARCHAR(MAX) AS JSON\n                ) AS re1\n                CROSS APPLY OPENJSON(payment_type_desc)\n                WITH(\n                    value VARCHAR(20)\n                ) AS re2;\n    END;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9 explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/discovery"
				},
				"content": {
					"query": "SELECT TOP 100\n    *\nFROM \n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS result;\n\nSELECT TOP 100\n    *\nFROM \n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS result\n    WHERE year = '2020';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\nIF OBJECT_ID('silver.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type;\n    \nCREATE EXTERNAL TABLE silver.trip_type\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/trip_type',\n        FILE_FORMAT = parquet_file_format\n    )\n    AS \n    SELECT *\n        FROM \n            bronze.trip_type;\n\nSELECT * FROM silver.trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data discovery Assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Assignments"
				},
				"content": {
					"query": "WITH cte_payment_type AS(\n        SELECT \n                payment_type,\n                payment_method\n                FROM \n                    OPENROWSET(\n                        BULK 'payment_type_array.json',\n                        DATA_SOURCE = 'nyc_taxi_data_raw',\n                        FORMAT = 'CSV',\n                        FIELDTERMINATOR = '0x0b',\n                        ROWTERMINATOR = '0x0a',\n                        FIELDQUOTE = '0x0b'\n                    )\n                    WITH(\n                        jsonDoc NVARCHAR(MAX)\n                    ) AS re0\n                    CROSS APPLY OPENJSON(jsonDoc)\n                    WITH(\n                        payment_type int,\n                        payment_type_desc NVARCHAR(MAX) AS JSON\n                    ) AS re1\n                    CROSS APPLY OPENJSON(payment_type_desc)\n                    WITH(\n                        payment_method VARCHAR(20) '$.value'\n                    ) AS re2\n    )\n    SELECT \n        taxi_zone.borough,\n        COUNT(1) AS total_trips,\n        SUM(CASE WHEN cte_payment_type.payment_method = 'Cash' THEN 1 ELSE 0 END) AS total_cash_trips,\n        CAST(SUM(CASE WHEN cte_payment_type.payment_method = 'Cash' THEN 1 ELSE 0 END)/CAST(COUNT(1) AS DECIMAL)*100 AS DECIMAL(5,2)) AS cash_trip_percentage,\n        SUM(CASE WHEN cte_payment_type.payment_method = 'Credit card' THEN 1 ELSE 0 END) AS total_card_trip,\n        CAST(SUM(CASE WHEN cte_payment_type.payment_method = 'Credit card' THEN 1 ELSE 0 END)/CAST(COUNT(1) AS DECIMAL)*100 AS DECIMAL(5,2)) AS card_trip_percentage\n        FROM \n            OPENROWSET(\n                BULK 'taxi_zone.csv',\n                DATA_SOURCE = 'nyc_taxi_data_raw',\n                FORMAT = 'CSV',\n                PARSER_VERSION = '2.0',\n                HEADER_ROW = TRUE\n            )\n            WITH (\n                location_id SMALLINT 1,\n                borough VARCHAR(15) 2,\n                zone VARCHAR(50) 3,\n                service_zone VARCHAR(15) 4\n            )AS taxi_zone\n            LEFT JOIN\n            OPENROWSET(\n                BULK 'trip_data_green_parquet/year=2020/month=01/',\n                DATA_SOURCE = 'nyc_taxi_data_raw',\n                FORMAT = 'PARQUET'\n            ) AS trip_data\n            ON trip_data.PULocationID = taxi_zone.location_id\n            JOIN cte_payment_type\n            ON cte_payment_type.payment_type = trip_data.payment_type\n            GROUP BY taxi_zone.borough;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo Query Parquet files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Demo Query Taxi Zones')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "demo"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://covidgentwo.dfs.core.windows.net/synapse-analytics-ws/demo/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Query From Folder Using Wildcard Path')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Assignments"
				},
				"content": {
					"query": "--Query From Folder Using Wildcard Path\nSELECT  \n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS results;\n\n-- Query from subfolders\nSELECT  \n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS results;\n\n--Use File Name Function\nSELECT  \n    result.filename()\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result;\n\n\n-- use file path to target partition\nSELECT  \n    result.filename() AS file_name, \n    result.filepath(1) AS year,\n    result.filepath(2) AS month\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS result\n    WHERE result.filepath(1) = '2020' and result.filepath(2) = '01'\n    ORDER BY result.filepath(1) DESC;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/how_to_set_data_processing_limits')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "-- How to fetch how much data we have processed in daily, monthly and yearly basis\nSELECT * FROM sys.dm_external_data_processed;\n\n-- How to see the data processed limits\nSELECT * FROM sys.configurations\nWHERE name LIKE 'Data Processed %';\n\n-- How to set data processed limits\nsp_set_data_processed_limit\n    @type = N'monthly', -- Like that we can write Daily, Weekly to set limits\n    @limit_tb = 4;\n\nsp_set_data_processed_limit\n    @type = N'daily', -- Like that we can write Weekly to set limits\n    @limit_tb = 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_from_multi-line_json_file')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Assignments"
				},
				"content": {
					"query": "-- How to deal with the Multiline Json\nSELECT *\n    FROM\n        OPENROWSET(\n            BULK 'rate_code_multi_line.json',\n            FORMAT = 'CSV',\n            DATA_SOURCE = 'nyc_taxi_data_raw',\n            FIELDTERMINATOR = '0x0b',\n            ROWTERMINATOR = '0x0b',\n            FIELDQUOTE = '0x0b'\n        ) \n        WITH(\n            jsonDoc NVARCHAR(MAX)\n        ) AS re1\n        CROSS APPLY OPENJSON(jsonDoc)\n        WITH(\n            rate_code_id TINYINT,\n            rate_code VARCHAR(20)\n        );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}